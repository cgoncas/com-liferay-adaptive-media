buildscript {
	dependencies {
		classpath group: "com.liferay", name: "com.liferay.gradle.plugins.defaults", version: "latest.release"
		classpath group: "org.kt3k.gradle.plugin", name: "coveralls-gradle-plugin", version: "2.6.3"
	}

	repositories {
		mavenLocal()

		maven {
			url "https://cdn.lfrs.sl/repository.liferay.com/nexus/content/groups/public"
		}

		maven {
			url "https://plugins.gradle.org/m2/"
		}
	}
}

apply plugin: "com.github.kt3k.coveralls"
apply plugin: "com.liferay.app.defaults.plugin"
apply plugin: "jacoco"

configure(subprojects.findAll {!it.childProjects}) {
	apply plugin: "com.liferay.defaults.plugin"
	apply plugin: "jacoco"

	configurations {
		runtimeLib {
			description = 'deployable runtime libs'
		}

		compile.extendsFrom(runtimeLib)
	}

	liferay {
		deployDir = new File("${rootDir}/../bundles/deploy")
	}

	jacocoTestReport {
		additionalSourceDirs = files(sourceSets.main.allSource.srcDirs)
		sourceDirectories = files(sourceSets.main.allSource.srcDirs)
		classDirectories =  files(sourceSets.main.output)

		reports {
			html.enabled = true
			xml.enabled = true
		}
	}

	test {
		ignoreFailures = false
	}

	testIntegration {
		ignoreFailures = false
	}

	task deployLibs(type: Copy) {
		from "${projectDir}/libs"
		exclude '*-javadoc.jar'
		exclude '*-sources.jar'
		into liferay.deployDir
		rename { String fileName ->
			fileName.replaceAll("(.*)-((\\d\\.{1})*\\d)\\.jar", "\$1.jar")
		}
	}

	task deployRuntimeLibs(type: Copy) {
		into liferay.deployDir
		from configurations.runtimeLib
		rename { String fileName ->
			fileName.replaceAll("(.*)-((\\d\\.{1})*\\d)\\.jar", "\$1.jar")
		}
	}
}

repositories {
	mavenLocal()
	jcenter()
}

task deploy() {
	subprojects.each {
		dependsOn("${it.path}:deploy")
	}
}

task deployLibs() {
	subprojects.each {
		dependsOn("${it.path}:deployLibs")
	}
}

task deployRuntimeLibs() {
	subprojects.each {
		dependsOn("${it.path}:deployRuntimeLibs")
	}
}

task coverageReport(type: org.gradle.testing.jacoco.tasks.JacocoReport) {
	additionalSourceDirs = files(subprojects.sourceSets.main.allSource.srcDirs)
	classDirectories = files(subprojects.sourceSets.main.output)
	executionData = files(subprojects.jacocoTestReport.executionData)
	sourceDirectories = files(subprojects.sourceSets.main.allSource.srcDirs)

	reports {
		html.enabled = true
		xml.enabled = true
	}

	onlyIf = { true }

	doFirst {
		executionData = files(executionData.findAll { it.exists() })
	}
}

tasks.coveralls {
	dependsOn 'coverageReport'
}

coveralls.jacocoReportPath = "build/reports/jacoco/coverageReport/coverageReport.xml"
coveralls.sourceDirs = files(subprojects.sourceSets.main.allSource.srcDirs).collect {
	file -> file.absolutePath
}